{"version":3,"sources":["GenerateForm.js","App.js","serviceWorker.js","index.js"],"names":["GenerateForm","props","createCodeSnippetButton","state","codeSnippet","bookmarkletLabel","__html","handleInputChange","event","target","id","value","setState","handleSubmit","preventDefault","gitHubProjectUrl","fetch","process","then","response","ok","Error","text","result","inputSrc","replace","Promise","resolve","reject","transform","overrides","compact","comments","minified","err","code","catch","console","error","log","prevProps","prevState","this","onSubmit","htmlFor","onChange","required","type","dangerouslySetInnerHTML","Component","App","params","window","location","search","substr","split","map","param","reduce","obj","className","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7e9775f7.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { transform } from '@babel/core';\n\nclass GenerateForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      codeSnippet: '',\n      bookmarkletLabel: props.bookmarkletLabel,\n      gitHubProjectUrl: props.gitHubProjectUrl\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.gitHubProjectUrl !== prevState.gitHubProjectUrl) {\n      this.setState({\n        codeSnippet: ''\n      });\n    }\n  }\n\n  createCodeSnippetButton = () => {\n    const { codeSnippet, bookmarkletLabel } = this.state;\n\n    return {\n      __html: `<a class=\"bookmarklet\" href='${codeSnippet}'>${bookmarkletLabel}</a>`\n    };\n  }\n\n  handleInputChange = (event) => {\n    const { id, value } = event.target\n\n    this.setState({\n      [id]: value\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { gitHubProjectUrl } = this.state;\n\n    fetch(process.env.PUBLIC_URL + '/bookmarklet.js')\n      .then((response) => {\n        if(!response.ok) {\n          throw Error(\"Failed to Fetch Markdown\");\n        }\n        return response.text()\n      })\n      .then((result) => {\n        let inputSrc = result.replace(/process\\.env\\.GITHUB_REPO_URL/g, '\"' + gitHubProjectUrl + '\"');\n\n        new Promise((resolve, reject) => {\n          transform(inputSrc, {\n            overrides: [{\n              compact: true\n            }],\n            comments: false,\n            minified: true\n          }, (err, result) => {\n            if (err) {\n              reject(err);\n            }\n\n            resolve(`javascript:(${result.code.replace(/;$/, ')')}`);\n          });\n        })\n        .then((result) => {\n          this.setState({\n            codeSnippet: result\n          });\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  }\n\n  render() {\n    const { bookmarkletLabel, codeSnippet, gitHubProjectUrl } = this.state;\n\n    return (\n      <Fragment>\n        <form onSubmit={this.handleSubmit}>\n          <fieldset>\n            <p>\n              <label htmlFor=\"gitHubProjectUrl\">Github Project URL:</label>\n              <input\n                id=\"gitHubProjectUrl\"\n                value={gitHubProjectUrl}\n                onChange={this.handleInputChange}\n                required\n                type=\"url\"\n              />\n            </p>\n\n            <p>\n              <label htmlFor=\"bookmarkletLabel\">Bookmarklet Label:</label>\n              <input\n                id=\"bookmarkletLabel\"\n                value={bookmarkletLabel}\n                onChange={this.handleInputChange}\n                required\n                type=\"text\"\n              />\n            </p>\n\n            <input type=\"submit\" value=\"Generate Bookmarklet\" />\n          </fieldset>\n        </form>\n\n        {codeSnippet && (\n          <section>\n            <p dangerouslySetInnerHTML={this.createCodeSnippetButton()}></p>\n            <p>Drag this box to your bookmark bar to create the bookmarklet</p>\n          </section>\n        )}\n      </Fragment>\n    );\n  }\n};\n\nexport default GenerateForm;\n","import React, { Component } from 'react';\nimport GenerateForm from './GenerateForm';\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const params = window.location.search.substr(1)\n      .split('&')\n      .map(param => param.split('='))\n      .reduce((obj, param) => ({\n        ...obj,\n        [param[0]]: param[1]\n      }), {});\n\n    this.state = {\n      bookmarkletLabel: params.bookmarkletLabel || 'New Issue',\n      gitHubProjectUrl: params.gitHubProjectUrl || 'https://github.com/kynatro/github-issue-bookmarklet'\n    }\n  }\n\n  render() {\n    const { bookmarkletLabel, gitHubProjectUrl } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>GitHub Issue Bookmarklet</h1>\n          <p>Generate a bookmarklet to create formatted issues in GitHub with context. The bookmarklet will display an overlay on the page with a form to fill out details regarding the issue. Submitting the overlay form will take the information and bring you to a new issue on your Github project with added context of the user's UserAgent and URL reported from.</p>\n        </header>\n\n        <GenerateForm\n          bookmarkletLabel={bookmarkletLabel}\n          gitHubProjectUrl={gitHubProjectUrl}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}